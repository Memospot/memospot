name: Cargo Tests

on:
  pull_request:
    branches: "*"
    paths:
      - "**/*.rs"
      - "**/Cargo.{lock,toml}"
      - "**/Tauri.toml"

  push:
    branches-ignore: "release/*.*.*"
    paths:
      - "**/*.rs"
      - "**/Cargo.{lock,toml}"
      - "**/Tauri.toml"

  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: -Copt-level=1 -Cstrip=symbols
  SCCACHE_DIR: ${{github.workspace}}/.sccache
  SCCACHE_GHA_ENABLED: false # required to cache everything at once and avoid rate limiting

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt:
    name: Check Rust code formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca
        with: { components: rustfmt }

      - { name: Run rustfmt, run: cargo fmt --all -- --check }

  clippy:
    name: Lint Rust code with Clippy
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { runner: ubuntu-22.04, rust_target: x86_64-unknown-linux-gnu }
          - { runner: macos-11, rust_target: aarch64-apple-darwin }
          - { runner: macos-11, rust_target: x86_64-apple-darwin }
          - { runner: windows-2019, rust_target: x86_64-pc-windows-msvc }

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout repository,
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b

      - if: ${{ runner.os == 'Windows' }}
        name: "[Windows] Fix environment variables"
        shell: pwsh
        run: |
          $SCCACHE_DIR = "${{env.SCCACHE_DIR}}".replace("/", "\")
          echo "SCCACHE_DIR=$SCCACHE_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $TEMP = "${env:USERPROFILE}\AppData\Local\Temp"
          echo "TEMP=$TEMP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TMP=$TEMP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create dummy Tauri build dependencies
        shell: bash
        run: |
          mkdir -p ./dist-ui
          mkdir -p ./server-dist/dist
          touch ./server-dist/dist/index.html
          touch ./server-dist/memos-x86_64-unknown-linux-gnu
          touch ./server-dist/memos-x86_64-apple-darwin
          touch ./server-dist/memos-aarc64-apple-darwin
          touch ./server-dist/memos-x86_64-pc-windows-msvc.exe

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        continue-on-error: true
        run: |
          if [ -f /etc/initramfs-tools/update-initramfs.conf ]; then
            sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf
          else
            sudo mkdir -p /etc/initramfs-tools/
            echo 'update_initramfs=no' | sudo tee -a /etc/initramfs-tools/update-initramfs.conf
          fi
          sudo rm -f /var/lib/man-db/auto-update

      - if: ${{ env.ACT }}
        name: "[ACT] Link apt-fast to apt-get"
        run: |
          sudo cp -l /usr/bin/apt-get /usr/local/sbin/apt-fast
          sudo apt-get update > /dev/null
      - if: ${{ runner.os == 'Linux'  }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@a6c3917cc929dd0345bfb2d3feaf9101823370ad
        with:
          packages: >-
            libappindicator3-dev
            libgtk-3-dev
            librsvg2-dev
            libwebkit2gtk-4.0-dev

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with: { xcode-version: latest-stable }

      # Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca
        with:
          targets: ${{ matrix.platform.rust_target }}
          components: clippy

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84
        with: { prefix-key: "cargo-${{ matrix.platform.rust_target }}" }
      # /Rust

      # sccache
      # - name: Install sccache
      #   uses: mozilla-actions/sccache-action@8417cffc2ec64127ad83077aceaa8631f7cdc83e
      - name: Install sccache
        uses: taiki-e/install-action@3068b7dc83db15fc2676a3ce4ae1ebb878685f59
        with: { tool: sccache@0.7.7 }

      - name: Initialize sccache environment
        shell: bash
        run: |
          echo DATE_STRING=$(date +'%Y%m%d') >> $GITHUB_ENV
          sccache --stop-server > /dev/null || true

      - name: Setup sccache cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: sccache-${{ matrix.platform.rust_target }}-${{ env.DATE_STRING }}
          restore-keys: sccache-${{ matrix.platform.rust_target }}

      - name: Start sccache
        shell: bash
        run: sccache --start-server || (sccache --stop-server && sleep 1 && sccache --start-server)
      # /sccache

      # Clippy with SARIF output
      - if: ${{ github.event_name == 'pull_request' }}
        name: "Install sarif-fmt and clippy-sarif"
        uses: taiki-e/install-action@3068b7dc83db15fc2676a3ce4ae1ebb878685f59
        with: { tool: "sarif-fmt@0.4.2,clippy-sarif@0.4.2" }

      - if: ${{ github.event_name == 'pull_request' }}
        name: "[PR] Run clippy with SARIF output"
        shell: bash
        run: |
          cargo clippy --all-features --all-targets --workspace --locked --message-format=json | clippy-sarif | tee clippy-results.sarif
          cat clippy-results.sarif | sarif-fmt --color always

      - if: ${{ github.event_name == 'pull_request' }}
        name: "[PR] Upload SARIF analysis results to GitHub"
        uses: github/codeql-action/upload-sarif@65c74964a9ed8c44ed9f19d4bbc5757a6a8e9ab9
        continue-on-error: true
        with: { sarif_file: ./clippy-results.sarif, wait-for-processing: true }
      # /Clippy with SARIF output

      - if: ${{ github.event_name != 'pull_request' }}
        name: Run clippy with standard output
        run: cargo clippy --all-features --all-targets --workspace --locked

      - { name: Cleanup sccache, run: sccache --stop-server }
