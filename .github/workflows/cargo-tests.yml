name: Cargo Tests

on:
  pull_request:
    branches:
      - "*"
    paths:
      - "**/*.rs"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/Tauri.toml"

  push:
    branches-ignore:
      - "release/*.*.*"
    paths:
      - "**/*.rs"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/Tauri.toml"

  schedule:
    - cron: "0 12 * * 6"

  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: -Copt-level=1 -Cstrip=symbols
  SCCACHE_GHA_ENABLED: false

jobs:
  fmt:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run rustfmt
        working-directory: ./src-tauri
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: "ubuntu-22.04"
            rust_target: "x86_64-unknown-linux-gnu"

          - runner: "macos-11"
            rust_target: "aarch64-apple-darwin"

          - runner: "macos-11"
            rust_target: "x86_64-apple-darwin"

          - runner: "windows-2019"
            rust_target: "x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create dummy Tauri build dependencies
        shell: bash
        run: |
          mkdir -p ./dist-ui
          mkdir -p ./server-dist
          touch ./server-dist/memos-x86_64-unknown-linux-gnu
          touch ./server-dist/memos-x86_64-apple-darwin
          touch ./server-dist/memos-aarc64-apple-darwin
          touch ./server-dist/memos-x86_64-pc-windows-msvc.exe

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        continue-on-error: true
        run: |
          if [ -f /etc/initramfs-tools/update-initramfs.conf ]; then
            sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf
          else
            sudo mkdir -p /etc/initramfs-tools/
            echo 'update_initramfs=no' | sudo tee -a /etc/initramfs-tools/update-initramfs.conf
          fi
          sudo rm -f /var/lib/man-db/auto-update

      - if: ${{ env.ACT }}
        run: |
          # Workaround when using nektos/act to run this workflow
          sudo cp -l /usr/bin/apt-get /usr/local/sbin/apt-fast
          sudo apt-get update

      - if: ${{ runner.os == 'Linux'  }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@v1.3.1
        with:
          packages: >-
            libappindicator3-dev
            libgtk-3-dev
            librsvg2-dev
            libwebkit2gtk-4.0-dev
          version: 1.0

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: ${{ matrix.platform.rust_target }}

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache@0.7.4

      - name: Initialize sccache environment
        shell: bash
        run: |
          echo SCCACHE_CACHE=$(sccache --show-stats | grep Local | cut -d '"' -f2) >> $GITHUB_ENV
          echo DATE_STRING=$(date +'%Y%m%d') >> $GITHUB_ENV
          sccache --stop-server > /dev/null

      - name: Setup sccache cache
        uses: actions/cache@v3
        with:
          path: ${{ env.SCCACHE_CACHE }}
          key: sccache-${{ runner.os }}-${{ env.DATE_STRING }}
          restore-keys: sccache-${{ runner.os }}

      - name: Start sccache
        shell: bash
        run: sccache --start-server || (sccache --stop-server && sleep 1 && sccache --start-server)

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: cargo-${{ matrix.platform.rust_target }}
          workspaces: "./src-tauri/target"
          cache-on-failure: true
          cache-all-crates: true
          cache-directories: |
            /root/.cargo/bin

      - if: ${{ github.event_name == 'pull_request' && runner.os != 'Windows' }}
        # currently, there are no prebuilt binaries of these tools for Windows
        name: "[POSIX] Install sarif-fmt and clippy-sarif"
        uses: taiki-e/install-action@v2
        with:
          tool: sarif-fmt@0.4.2,clippy-sarif@0.4.2

      - if: ${{ github.event_name == 'pull_request' && runner.os == 'Windows' }}
        name: "[Windows] Install clippy-sarif and sarif-fmt"
        run: |
          cargo install --locked sarif-fmt clippy-sarif --version 0.4.2

      - if: ${{ github.event_name == 'pull_request' }}
        name: "[PR] Run clippy with SARIF output"
        continue-on-error: true
        shell: bash
        working-directory: ./src-tauri
        run: |
          set +e
          cargo clippy --all-features --all-targets --workspace --locked --message-format=json | clippy-sarif | tee clippy-results.sarif | sarif-fmt

      - if: ${{ github.event_name == 'pull_request' }}
        name: "[PR] Upload SARIF analysis results to GitHub"
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: ./src-tauri/clippy-results.sarif
          wait-for-processing: true

      - name: Finalize workflow with clippy output
        working-directory: ./src-tauri
        run: |
          cargo clippy --version
          cargo clippy --all-features --all-targets --workspace --locked

      - name: Cleanup sccache
        run: sccache --stop-server
