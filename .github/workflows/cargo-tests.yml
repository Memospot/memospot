name: Cargo Tests

on:
  pull_request:
    branches:
      - main
      - dev
      - "release/*.*.*"
    paths:
      - "**/*.rs"
      - "**/Cargo.*"
      - "**/Tauri.toml"
  push:
    branches:
      - main
      - dev
      - "release/*.*.*"
    paths:
      - "src-tauri/**/*.rs"
      - "src-tauri/**/Cargo.*"
      - "src-tauri/**/Tauri.toml"
  schedule:
    - cron: "0 12 * * 6"
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: -Copt-level=1 -Cstrip=symbols
  SCCACHE_GHA_ENABLED: false

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run rustfmt
        working-directory: ./src-tauri
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: "ubuntu-20.04"
            rust_target: "x86_64-unknown-linux-gnu"

          - runner: "macos-11"
            rust_target: "aarch64-apple-darwin"

          - runner: "macos-11"
            rust_target: "x86_64-apple-darwin"

          - runner: "windows-2019"
            rust_target: "x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create dummy server binaries
        shell: bash
        run: |
          mkdir -p ./server-dist
          touch ./server-dist/memos-x86_64-unknown-linux-gnu
          touch ./server-dist/memos-x86_64-apple-darwin
          touch ./server-dist/memos-aarc64-apple-darwin
          touch ./server-dist/memos-x86_64-pc-windows-msvc.exe

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        run: |
          sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf
          sudo rm -f /var/lib/man-db/auto-update

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@v1.3.1
        continue-on-error: true
        with:
          packages: >-
            build-essential
            curl
            file
            wget
            libgtk-3-dev
            librsvg2-dev
            libssl-dev
            libwebkit2gtk-4.0-dev
            patchelf
            libappindicator3-dev
          version: 1.0

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install sarif-fmt"
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "sarif-fmt-v0.4.2"
          platform: apple-darwin
          extension-matching: disable
          rename-to: sarif-fmt
          chmod: 0755
      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Install sarif-fmt"
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "sarif-fmt-v0.4.2"
          platform: unknown-linux-gnu
          extension-matching: disable
          rename-to: sarif-fmt
          chmod: 0755

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Install clippy-sarif"
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "clippy-sarif-v0.4.2"
          platform: unknown-linux-gnu
          extension-matching: disable
          rename-to: clippy-sarif
          chmod: 0755
      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install clippy-sarif"
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "clippy-sarif-v0.4.2"
          platform: apple-darwin
          extension-matching: disable
          rename-to: clippy-sarif
          chmod: 0755

      # - if: ${{ runner.os == 'Windows' }}
      #   name: Install sarif-fmt (Windows)
      #   uses: taiki-e/cache-cargo-install-action@v1
      #   with:
      #     tool: sarif-fmt@0.4.2
      # - if: ${{ runner.os == 'Windows' }}
      #   name: Install clippy-sarif (Windows)
      #   uses: taiki-e/cache-cargo-install-action@v1
      #   with:
      #     tool: clippy-sarif@0.4.2

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Initialize sccache environment
        shell: bash
        run: |
          echo SCCACHE_CACHE=$(sccache --show-stats | grep Local | cut -d '"' -f2) >> $GITHUB_ENV
          echo DATE_STRING=$(date +'%Y%m%d') >> $GITHUB_ENV
          sccache --stop-server

      - name: Setup sccache
        uses: actions/cache@v3
        with:
          path: ${{ env.SCCACHE_CACHE }}
          key: sccache-${{ runner.os }}-0-${{ env.DATE_STRING }}
          restore-keys: sccache-${{ runner.os }}-0

      - name: Start sccache
        shell: bash
        working-directory: ${{ github.workspace }}
        run: sccache --start-server

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: ${{ matrix.platform.rust_target }}

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: cargo-${{ matrix.platform.rust_target }}
          cache-on-failure: true
          cache-all-crates: true

      - if: ${{ runner.os != 'Windows' && github.event_name == 'pull_request' }}
        name: "[Linux/macOS] Run clippy with sarif output"
        continue-on-error: true
        shell: bash
        working-directory: ./src-tauri
        run: >
          set +e;
          cargo clippy --all-features --all-targets --workspace --locked --message-format=json
          | clippy-sarif
          | tee clippy-results.sarif
          | sarif-fmt ;

      - if: ${{ runner.os != 'Windows' && github.event_name == 'pull_request' }}
        name: Upload SARIF analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        continue-on-error: true
        with:
          sarif_file: ./src-tauri/clippy-results.sarif
          wait-for-processing: true

      - name: Cleanup sccache
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          sccache --stop-server

      - name: Finalize with clippy output
        shell: bash
        working-directory: ./src-tauri
        run: |
          cargo clippy --version;
          cargo clippy --all-features --all-targets --workspace --locked
