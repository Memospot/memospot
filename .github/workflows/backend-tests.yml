name: Back-end Tests

on:
  pull_request:
    branches:
      - main
      - dev
      - "release/*.*.*"
    paths:
      - "src-tauri/**/*.rs"
      - "src-tauri/**/Cargo.*"
      - "src-tauri/**/Tauri.toml"
  push:
    branches:
      - main
      - dev
      - "release/*.*.*"
    paths:
      - "src-tauri/**/*.rs"
      - "src-tauri/**/Cargo.*"
      - "src-tauri/**/Tauri.toml"
  schedule:
    - cron: "0 12 * * 6"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -C target-cpu=native -Copt-level=0
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: true

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run rustfmt
        run: cargo fmt --all -- --check
        working-directory: ./src-tauri

  clippy:
    name: Clippy
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create dummy server binary (POSIX)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mkdir -p ./server-dist
          touch ./server-dist/memos-$(uname -m)-unknown-linux-gnu
          touch ./server-dist/memos-$(uname -m)-apple-darwin
      - name: Create dummy server binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -Type Directory -Path ./server-dist -Force
          New-Item -Path ./server-dist -Name "memos-x86_64-pc-windows-msvc.exe" -ItemType "file" -Value $null

      - name: Disable initramfs and man-db update (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf
          sudo rm -f /var/lib/man-db/auto-update

      - name: Install apt packages (Ubuntu)
        uses: awalsh128/cache-apt-pkgs-action@v1.3.1
        if: matrix.os == 'ubuntu-latest'
        continue-on-error: true
        with:
          packages: >-
            libgtk-3-dev
            librsvg2-dev
            libssl-dev
            libwebkit2gtk-4.0-dev
            patchelf
            libappindicator3-dev
          version: 1.0

      - name: Install sarif-fmt (Ubuntu)
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        if: matrix.os == 'ubuntu-latest'
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "sarif-fmt-v0.4.2"
          platform: unknown-linux-gnu
          extension-matching: disable
          rename-to: sarif-fmt
          chmod: 0755

      - name: Install sarif-fmt (macOS)
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        if: matrix.os == 'macos-latest'
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "sarif-fmt-v0.4.2"
          platform: apple-darwin
          extension-matching: disable
          rename-to: sarif-fmt
          chmod: 0755

      - name: Install clippy-sarif (Ubuntu)
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        if: matrix.os == 'ubuntu-latest'
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "clippy-sarif-v0.4.2"
          platform: unknown-linux-gnu
          extension-matching: disable
          rename-to: clippy-sarif
          chmod: 0755

      - name: Install clippy-sarif (macOS)
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        if: matrix.os == 'macos-latest'
        with:
          repo: psastras/sarif-rs
          cache: enable
          tag: "clippy-sarif-v0.4.2"
          platform: apple-darwin
          extension-matching: disable
          rename-to: clippy-sarif
          chmod: 0755

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.2
        with:
          version: "v0.7.3"

      - name: Run clippy (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cargo clippy --all-features --all --
          Exit $LASTEXITCODE
        working-directory: ./src-tauri

      - name: Run clippy with sarif output (POSIX)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: >
          CLIPPY=$(cargo clippy --all-features --all --message-format=json);
          echo "CLIPPY_EXIT_CODE=$?" >> $GITHUB_ENV;
          $CLIPPY
          | clippy-sarif
          | tee clippy-results.sarif
          | sarif-fmt
          cat clippy-results.sarif
        working-directory: ./src-tauri

      - name: Upload sarif analysis results to GitHub (POSIX)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./src-tauri/clippy-results.sarif
          wait-for-processing: true

      - name: Finalize with clippy exit code (POSIX)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          exit $CLIPPY_EXIT_CODE
        working-directory: ./src-tauri
