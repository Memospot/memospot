name: Rust lint and test

on:
  merge_group:
  pull_request:
    paths:
      - "**/*.rs"
      - "**/Cargo.{lock,toml}"
      - "**/check-rust.yml"
      - "**/Tauri.toml"
  push:
    paths:
      - "**/*.rs"
      - "**/Cargo.{lock,toml}"
      - "**/check-rust.yml"
      - "**/Tauri.toml"
  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  CACHE_KEY: ${{ github.run_id }}-${{ github.run_number }}
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: -Copt-level=1 -Cstrip=symbols -Ccodegen-units=256
  CARGO_INCREMENTAL: 0
  SCCACHE_DIR: ${{github.workspace}}/.sccache
  SCCACHE_GHA_ENABLED: false # required to cache everything at once and avoid rate limiting
  APT_DEPS: >-
    build-essential
    curl
    file
    patchelf
    wget
    libayatana-appindicator3-dev
    libgtk-3-dev
    librsvg2-dev
    libssl-dev
    libwebkit2gtk-4.1-dev
    libxdo-dev

jobs:
  fmt:
    name: Check Rust code formatting
    runs-on: ubuntu-latest
    strategy: { fail-fast: false }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17
        with: { toolchain: stable, components: rustfmt }

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  lint-and-test:
    name: Rust lint and test
    permissions: { actions: read, contents: read, security-events: write }
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { runner: macos-13, rust_target: aarch64-apple-darwin }
          - { runner: macos-13, rust_target: x86_64-apple-darwin }
          - { runner: ubuntu-22.04, rust_target: x86_64-unknown-linux-gnu }
          - { runner: windows-2019, rust_target: x86_64-pc-windows-msvc }

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout repository,
        uses: actions/checkout@v4
      # Set env vars
      - name: "Set env vars"
        shell: bash
        run: |
          echo CACHE_KEY=$(date +'%Y%m%d') >> $GITHUB_ENV

      - if: ${{ runner.os == 'Windows' }}
        name: "[Windows] Fix environment variables"
        run: |
          $SCCACHE_DIR = "${{env.SCCACHE_DIR}}".replace("/", "\")
          echo "SCCACHE_DIR=$SCCACHE_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      # /Set env vars

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        continue-on-error: true
        run: |
          sudo mkdir -p /etc/initramfs-tools/
          echo -e 'update_initramfs=no\nbackup_initramfs=no' | sudo tee /etc/initramfs-tools/update-initramfs.conf
          sudo rm -f /var/lib/man-db/auto-update

      # Platform deps
      - if: ${{ runner.os == 'Linux'  }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@a6c3917cc929dd0345bfb2d3feaf9101823370ad
        with: { packages: "${{env.APT_DEPS}}" }

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with: { xcode-version: latest-stable }
      # /Platform deps

      - name: Create dummy build dependencies
        shell: bash
        run: |
          mkdir -p ./dist-ui ./server-dist/dist
          touch ./server-dist/dist/index.html \
                ./server-dist/memos-x86_64-unknown-linux-gnu \
                ./server-dist/memos-x86_64-apple-darwin \
                ./server-dist/memos-aarc64-apple-darwin \
                ./server-dist/memos-x86_64-pc-windows-msvc.exe

      # Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17
        with:
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
          toolchain: stable

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84
        with: { prefix-key: "cargo-${{ matrix.platform.rust_target }}" }
      # /Rust

      # sccache
      - name: Install sccache
        uses: taiki-e/install-action@638d0bf357cd5e20410163cdf70545caa82bfa5f
        with: { tool: sccache@0.8.2 }

      - name: Initialize sccache environment
        shell: bash
        run: sccache --stop-server > /dev/null || true

      - name: Setup sccache cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: sccache-${{ matrix.platform.rust_target }}-${{ env.CACHE_KEY }}
          restore-keys: sccache-${{ matrix.platform.rust_target }}

      - name: Start sccache
        shell: bash
        run: sccache --start-server || (sccache --stop-server && sleep 1 && sccache --start-server)
      # /sccache

      # Clippy with SARIF output
      - if: ${{ github.event_name == 'pull_request' }}
        name: "Install sarif-fmt and clippy-sarif"
        uses: taiki-e/install-action@638d0bf357cd5e20410163cdf70545caa82bfa5f
        with: { tool: "sarif-fmt@0.4.2,clippy-sarif@0.4.2" }

      - if: ${{ github.event_name == 'pull_request' }}
        name: "[PR] Run clippy with SARIF output"
        shell: bash
        run: |
          cargo clippy --all-features --all-targets --workspace --locked --message-format=json | clippy-sarif | tee clippy-results.sarif
          cat clippy-results.sarif | sarif-fmt --color always

      - if: ${{ github.event_name == 'pull_request' }}
        name: "[PR] Upload SARIF analysis results to GitHub"
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with: { sarif_file: ./clippy-results.sarif, wait-for-processing: true }
      # /Clippy with SARIF output

      - if: ${{ github.event_name != 'pull_request' }}
        name: Run clippy with standard output
        continue-on-error: true
        run: cargo clippy --all-features --all-targets --workspace --locked

      - name: Run all Rust tests
        continue-on-error: true
        run: cargo test --workspace --lib -- --nocapture

      - name: Cleanup sccache
        run: sccache --stop-server
