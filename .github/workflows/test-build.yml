name: "Test Build"
on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  DENO_DIR: ${{github.workspace}}/.deno
  RUST_BACKTRACE: short
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: -Copt-level=1 -Cstrip=symbols
  SCCACHE_DIR: ${{github.workspace}}/.sccache
  SCCACHE_GHA_ENABLED: false # required to cache everything at once and avoid rate limiting
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

jobs:
  test-tauri-build:
    name: "Test Build"
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: "ubuntu-22.04"
            rust_target: "x86_64-unknown-linux-gnu"
          - runner: "macos-11"
            rust_target: "aarch64-apple-darwin"
          - runner: "macos-11"
            rust_target: "x86_64-apple-darwin"
          - runner: "windows-2019"
            rust_target: "x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        continue-on-error: true
        run: |
          if [ -f /etc/initramfs-tools/update-initramfs.conf ]; then
            sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf
          else
            sudo mkdir -p /etc/initramfs-tools/
            echo 'update_initramfs=no' | sudo tee -a /etc/initramfs-tools/update-initramfs.conf
          fi
          sudo rm -f /var/lib/man-db/auto-update

      - if: ${{ env.ACT }}
        name: "[ACT] Link apt-get as apt-fast"
        run: |
          sudo cp -l /usr/bin/apt-get /usr/local/sbin/apt-fast
          sudo apt-get update > /dev/null
      - if: ${{ runner.os == 'Linux'  }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@44c33b32f808cdddd5ac0366d70595ed63661ed8
        with:
          packages: >-
            libappindicator3-dev
            libgtk-3-dev
            librsvg2-dev
            libwebkit2gtk-4.0-dev
            patchelf

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with:
          xcode-version: latest-stable

      - name: Install Task
        uses: jaxxstorm/action-install-gh-release@71d17cb091aa850acb2a1a4cf87258d183eb941b
        with:
          repo: go-task/task
          cache: enable
          tag: "v3.34.1"

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Install UPX"
        uses: crazy-max/ghaction-upx@0fc45e912669ba9e8fa2b430e97c8da2a632e29b
        with:
          install-only: true

      # Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84
        with:
          prefix-key: cargo-${{ matrix.platform.rust_target }}
      # /Rust

      # sccache
      - name: Install sccache
        uses: taiki-e/install-action@5794068c211bc8f5f4514b7c3f03d6adbe66f1b7
        with:
          tool: sccache@0.7.7

      - name: Initialize sccache environment
        shell: bash
        run: |
          echo DATE_STRING=$(date +'%Y%m%d') >> $GITHUB_ENV
          sccache --stop-server > /dev/null || true

      - name: Setup sccache cache
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: sccache-${{ matrix.platform.rust_target }}-${{ env.DATE_STRING }}
          restore-keys: sccache-${{ matrix.platform.rust_target }}

      - name: Start sccache
        shell: bash
        run: sccache --start-server || (sccache --stop-server && sleep 1 && sccache --start-server)
      # /sccache

      # Deno
      - name: Install Deno
        uses: jaxxstorm/action-install-gh-release@71d17cb091aa850acb2a1a4cf87258d183eb941b
        with:
          repo: denoland/deno
          cache: enable
          tag: "v1.39.1"

      - if: ${{ runner.os != 'Windows' }}
        name: Cache Deno dependencies
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2
        with:
          key: denodeps-${{ runner.os }}-${{ hashFiles('**/deno.lock') }}
          restore-keys: denodeps-${{ runner.os }}
          path: |
            ${{env.DENO_DIR}}
            ${{github.workspace}}/node_modules

      - if: ${{ runner.os == 'Windows' }}
        name: Cache Deno dependencies
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2
        with:
          key: denodeps-${{ runner.os }}-${{ hashFiles('**/deno.lock') }}
          restore-keys: denodeps-${{ runner.os }}
          path: |
            ${{env.DENO_DIR}}
          # node_modules is not cached on Windows as it breaks subsequent
          # runs, probably because this folder relies on symlinks

      - name: Restore Deno dependencies
        run: task ci:deno:cache
      # /Deno

      - name: Cache memos builds
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2
        with:
          key: memosbuilds-cross-${{ env.DATE_STRING }}
          restore-keys: memosbuilds-cross
          enableCrossOsArchive: true
          path: ./server-dist

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@8e393664005b532fa959fbd1a59c1d2235ff9248
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__-pre
          releaseName: "Memospot v__VERSION__-pre"
          releaseBody: |
            See the assets section below to download the app.
          releaseDraft: true
          prerelease: true
          args: --verbose --target ${{ matrix.platform.rust_target }}

      - name: Cleanup sccache
        run: sccache --stop-server
