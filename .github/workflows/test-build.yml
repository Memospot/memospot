name: "Test Build"
on:
  push:
    tags: "v*.*.*-*"
    branches: "*"
    paths:
      - .github/workflows/test-build.yml
      - "**/bun.lockb"
      - "**/package.json"
      - "**/Cargo.{lock,toml}"
      - "**/Tauri.toml"
      - "**/*.{rs,ts}"
      - "**/*.{nsi,wxs}"

  workflow_dispatch:

env:
  RUST_BACKTRACE: short
  RUSTFLAGS: -Copt-level=1 -Cstrip=symbols
  RUSTC_WRAPPER: sccache
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  SCCACHE_DIR: ${{github.workspace}}/.sccache
  SCCACHE_GHA_ENABLED: false # required to cache everything at once and avoid rate limiting
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  APT_DEPS: >-
    libappindicator3-dev
    libgtk-3-dev
    librsvg2-dev
    libwebkit2gtk-4.0-dev
    patchelf

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  test-tauri-build:
    name: Test Build
    permissions: { contents: write }
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { runner: ubuntu-22.04, rust_target: x86_64-unknown-linux-gnu }
          - { runner: macos-12, rust_target: aarch64-apple-darwin }
          - { runner: macos-12, rust_target: x86_64-apple-darwin }
          - { runner: windows-2019, rust_target: x86_64-pc-windows-msvc }

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      # Set env vars
      - name: "Set env vars"
        shell: bash
        run: |
          echo START=$(date +'%s') >> $GITHUB_ENV
          echo DATE_STRING=$(date +'%Y%m%d') >> $GITHUB_ENV
      - if: ${{ runner.os == 'Windows' }}
        name: "[Windows] Fix environment variables"
        run: |
          $SCCACHE_DIR = "${{env.SCCACHE_DIR}}".replace("/", "\")
          echo "SCCACHE_DIR=$SCCACHE_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $TEMP = "${env:USERPROFILE}\AppData\Local\Temp"
          echo "TEMP=$TEMP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TMP=$TEMP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      # /Set env vars

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        continue-on-error: true
        run: |
          sudo mkdir -p /etc/initramfs-tools/
          echo -e 'update_initramfs=no\nbackup_initramfs=no' | sudo tee /etc/initramfs-tools/update-initramfs.conf
          sudo rm -f /var/lib/man-db/auto-update

      # Platform deps
      - if: ${{ env.ACT && runner.os == 'Linux' }}
        name: "[ACT] Install platform dependencies"
        run: |
          rm -f /etc/apt/sources.list.d/git-core-ubuntu-ppa-jammy.list \
                /etc/apt/sources.list.d/github_git-lfs.list \
                /etc/apt/sources.list.d/microsoft-prod.list
          echo -e "\033[0;36m Installing dependencies...\033[0m"
          add-apt-repository ppa:apt-fast/stable -y > /dev/null
          apt-get update > /dev/null && apt-get install apt-fast -y > /dev/null
          apt-fast install -y ${{env.APT_DEPS}} > /dev/null
          echo -e "\032[0;34m Dependencies installed!\033[0m"
      - if: ${{ !env.ACT && runner.os == 'Linux'  }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@a6c3917cc929dd0345bfb2d3feaf9101823370ad
        with: { packages: "${{env.APT_DEPS}}" }
      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with: { xcode-version: latest-stable }
      # /Platform deps

      - name: Install Just
        uses: taiki-e/install-action@331a600f1b10a3fed8dc56f925012bede91ae51f
        with: { tool: just@1.32.0 }

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Install UPX"
        uses: crazy-max/ghaction-upx@0fc45e912669ba9e8fa2b430e97c8da2a632e29b
        with: { install-only: true }

      # Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17
        with:
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
          toolchain: stable

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84
        with: { prefix-key: "cargo-${{ matrix.platform.rust_target }}" }
      # /Rust

      # sccache
      - name: Install sccache
        uses: taiki-e/install-action@331a600f1b10a3fed8dc56f925012bede91ae51f
        with: { tool: sccache@0.8.1 }

      - name: Initialize sccache environment
        shell: bash
        run: sccache --stop-server > /dev/null || true

      - name: Setup sccache cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: sccache-${{ matrix.platform.rust_target }}-${{ env.DATE_STRING }}
          restore-keys: sccache-${{ matrix.platform.rust_target }}

      - name: Start sccache
        shell: bash
        run: sccache --start-server || (sccache --stop-server && sleep 1 && sccache --start-server)
      # /sccache

      # Bun
      - uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7
        with: { bun-version: latest }

      - # node_modules is not cached on Windows as it breaks subsequent runs
        if: ${{ runner.os != 'Windows' }}
        name: Cache node_modules
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: node_modules-${{ runner.os }}
          path: ${{github.workspace}}/node_modules

      - name: Cache Bun dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          key: bundeps-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: bundeps-${{ runner.os }}
          path: ~/.bun

      - name: Install Bun dependencies
        run: just deps-ts
      # /Bun

      - name: Cache memos builds
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          key: memosbuilds-cross-${{ env.DATE_STRING }}
          restore-keys: memosbuilds-cross
          enableCrossOsArchive: true
          path: ./server-dist

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@f290eb8e3c2a5097b2c6facfa1b6674dab9eaefb
        continue-on-error: true
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          tagName: v__VERSION__-pre
          releaseName: "Memospot v__VERSION__-pre"
          releaseBody: See the assets section below to download the app.
          releaseDraft: true
          prerelease: true
          args: --verbose --target ${{ matrix.platform.rust_target }}

      - name: "Cleanup sccache"
        run: "sccache --stop-server"

      - name: Show execution time
        shell: bash
        run: |
          end=`date +%s`
          runtime=$(($end-${{env.START}}))
          echo -e "\033[0;36m Execution took $runtime seconds.\033[0m"
