name: "Test Build"
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  DENO_DIR: ${{github.workspace}}/.deno
  RUST_BACKTRACE: short
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: -Copt-level=1 -Cstrip=symbols
  SCCACHE_GHA_ENABLED: false
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

jobs:
  test-tauri-build:
    name: "Test Build"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: "ubuntu-22.04"
            rust_target: "x86_64-unknown-linux-gnu"

          - runner: "macos-11"
            rust_target: "aarch64-apple-darwin"

          - runner: "macos-11"
            rust_target: "x86_64-apple-darwin"

          - runner: "windows-2019"
            rust_target: "x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - uses: actions/checkout@v4

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        run: |
          sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf
          sudo rm -f /var/lib/man-db/auto-update

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@v1.3.1
        continue-on-error: true
        with:
          packages: >-
            build-essential
            curl
            file
            wget
            libgtk-3-dev
            librsvg2-dev
            libssl-dev
            libwebkit2gtk-4.0-dev
            patchelf
            libappindicator3-dev
          version: 1.0

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - if: ${{ runner.os != 'macOS' }}
        name: "[Windows/Linux] Install UPX"
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          install-only: true

      - name: Install Task
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: go-task/task
          cache: enable
          tag: "v3.32.0"

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Initialize sccache environment
        shell: bash
        run: |
          echo SCCACHE_CACHE=$(sccache --show-stats | grep Local | cut -d '"' -f2) >> $GITHUB_ENV
          echo DATE_STRING=$(date +'%Y%m%d') >> $GITHUB_ENV
          sccache --stop-server

      - name: Setup sccache
        uses: actions/cache@v3
        with:
          path: ${{ env.SCCACHE_CACHE }}
          key: sccache-${{ runner.os }}-0-${{ env.DATE_STRING }}
          restore-keys: sccache-${{ runner.os }}-0

      - name: Start sccache
        shell: bash
        working-directory: ${{ github.workspace }}
        run: sccache --start-server

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: cargo-${{ matrix.platform.rust_target }}
          cache-on-failure: true
          cache-all-crates: true

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          key: denodeps-cross-${{ hashFiles('**/deno.lock') }}
          restore-keys: denodeps-cross-
          enableCrossOsArchive: true
          path: |
            /home/runner/.cache/deno/deps/https/deno.land
            ${{github.workspace}}/.deno
            ${{github.workspace}}/node_modules

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Restore Deno dependencies
        run: deno cache --lock=deno.lock ./build-scripts/deps.ts

      - name: Cache memos builds
        uses: actions/cache@v3
        with:
          key: memosbuilds-cross-${{ env.DATE_STRING }}
          restore-keys: memosbuilds-cross-
          enableCrossOsArchive: true
          path: ./server-dist

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__-pre
          releaseName: "Memospot v__VERSION__-pre"
          releaseBody: |
            See the assets section below to download the app.
          releaseDraft: true
          prerelease: true
          args: --target ${{ matrix.platform.rust_target }}

      - name: Cleanup sccache
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          sccache --stop-server
