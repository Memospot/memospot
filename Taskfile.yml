version: "3"
env:
  REPO_ROOT:
    sh: |
      echo {{ osClean "$(git rev-parse --show-toplevel)" }}

  # enable sccache for all tasks, if available
  RUSTC_WRAPPER:
    sh: |
      sccache="{{ fromSlash "$HOME/.cargo/bin/sccache" }}{{if eq OS "windows"}}.exe{{end}}"
      if [ -z $(command -v $sccache) ]; then
        echo "";
      else
        echo "$sccache";
      fi
  # scoped sccache dir
  SCCACHE_DIR:
    sh: |
      cd {{ .REPO_ROOT }} ;
      sh -c "mkdir -p ./.sccache" ;
      cd ./.sccache ;
      echo {{ osClean "$(pwd)" }}

  # fast build with only host CPU optimizations
  RUSTFLAGS: -C target-cpu=native -Copt-level=0
  DENO_DIR:
    sh: |
      cd {{ .REPO_ROOT }} ;
      sh -c "mkdir -p ./.deno" ;
      cd ./.deno ;
      echo {{ osClean "$(pwd)" }}
  # scoped deno cache dir
  DPRINT_CACHE_DIR:
    sh: |
      cd {{ .REPO_ROOT }} ;
      sh -c "mkdir -p ./.dprint" ;
      cd ./.dprint ;
      echo {{ osClean "$(pwd)" }}

tasks:
  ui:dev:
    desc: Run Vite front-end dev server with Deno
    summary: |
      - This will start the front-end in development mode.
      - Default address: http://localhost:5173
    cmds:
      - deno task dev

  ui:build:
    desc: Run Vite front-end build with Deno
    cmds:
      - deno task build
    sources:
      - "./src-ui/src/**/*"
    generates:
      - "./dist-ui/**/*"

  download-memos-binaries:
    desc: Download Memos server binaries
    summary: |
      - Download latest versions of Memos server binaries to `server-dist/`
      - This will be used by the Tauri build process.
      - Only runs if any of the binaries are missing.
    cmds:
      - deno run -A ./build-scripts/downloadMemosBuildsHook.ts
    status:
      - test -f ./server-dist/memos-x86_64-unknown-linux-gnu
      - test -f ./server-dist/memos-x86_64-pc-windows-msvc.exe
      - test -f ./server-dist/memos-x86_64-apple-darwin
      - test -f ./server-dist/memos-aarch64-apple-darwin

  ##### Tauri Build Hooks #####
  tauri:hook:before-dev:
    desc: Before dev scripts
    cmds:
      - task: download-memos-binaries
      - task: ui:dev

  tauri:hook:before-build:
    desc: Before build scripts
    summary: |
      - Build Frontend with Deno/Vite
      - Download latest versions of Memos server binaries to `server-dist/`
    cmds:
      - task: gen:icons
      - task: ui:build
      - task: download-memos-binaries

  tauri:hook:before-bundle:
    desc: Before bundle scripts
    summary: |
      - upx
    cmds:
      - deno run -A ./build-scripts/upxPackHook.ts
  ##### /Build Hooks #####

  #### Code runner ####
  # Used to overcome limitations of code-runner vscode extension
  coderunner:deno:
    desc: Run a script with Deno
    cmds:
      - deno run -A {{ .CLI_ARGS }}
  coderunner:deno:test:
    desc: Test a script with Deno
    cmds:
      - deno test -A {{ .CLI_ARGS }}
  coderunner:dprint:check:
    desc: Run dprint check
    cmds:
      - cd "{{ trimAll "'" (osDir .CLI_ARGS) }}"; dprint check {{ trimAll "'" (osBase .CLI_ARGS) }}
  #### /Code runner ####

  ##### Tests #####
  test:
    desc: Run all tests
    deps:
      - test:rust
      - test:build-scripts
  test:rust:
    desc: Run all Rust tests
    cmds:
      - cd ./src-tauri; cargo test --package memospot --lib -- --nocapture
  test:build-scripts:
    desc: Run build scripts tests
    cmds:
      - deno task test-build-scripts
  ##### /Tests #####

  ##### Development #####
  dev:
    desc: Run the app in development mode
    summary: |
      - This will start the app in development mode.
      - It will automatically reload the app when you make changes.
      - A fast Rust build is prioritized.
    deps:
      - task: dev:killprocesses
    cmds:
      - cargo tauri dev
      - task: dev:killprocesses
      - task: sccache:stats
  dev:killprocesses:
    desc: Kill all running Memospot/Memos processes
    silent: true
    cmds:
      - task: dev:killprocesses:posix
      - task: dev:killprocesses:windows
  dev:killprocesses:posix:
    platforms: [linux, darwin]
    internal: true
    ignore_error: true
    cmds:
      - killall memospot
      - killall memos
  dev:killprocesses:windows:
    platforms: [windows]
    internal: true
    ignore_error: true
    cmds:
      - taskkill /f /t /im memospot.exe
      - taskkill /f /t /im memos.exe

  update-deno-lock:
    desc: Update Deno lock file
    cmds:
      - deno cache --reload --lock=deno.lock --lock-write ./build-scripts/deps.ts

  update-deps:
    desc: Update project dependencies
    cmds:
      - cd ./src-tauri; cargo update

  update-toolchain:
    desc: Update project toolchain
    cmds:
      - rustup update
      - rustup self update
      - rustup component add clippy

  gen:icons:
    desc: Generate app icons from `assets/app-icon-lossless.webp`
    cmds:
      - cd ./src-tauri; cargo tauri icon ../assets/app-icon-lossless.webp
      # - sh -c "cp -f ./src-tauri/icons/icon.ico ./src-ui/public/favicon.ico"
    sources:
      - ./assets/app-icon-lossless.webp

  ##### /Development #####

  ##### Build #####
  build:
    desc: Build the app for production
    summary: |
      - This will create an universal x86-64 optimized build of the app.
    env:
      # optimized universal x86-64 build
      RUSTFLAGS: -Ctarget-cpu=x86-64 -Copt-level=3 -Cstrip=symbols -Ccodegen-units=1
    cmds:
      - cargo tauri build
      - task: sccache:stats
      - task: postbuild
  postbuild:
    ignore_error: true
    cmds:
      - sh -c "mkdir -p ./build"
      - sh -c "mv -f ./src-tauri/target/release/memos ./build/"
      - sh -c "mv -f ./src-tauri/target/release/memospot ./build/"
      - sh -c "mv -f ./src-tauri/target/release/memos.exe ./build/"
      - sh -c "mv -f ./src-tauri/target/release/memospot.exe ./build/"
      - sh -c "mv -f ./src-tauri/target/release/bundle/nsis/* ./build/"
      - sh -c "mv -f ./src-tauri/target/release/bundle/msi/* ./build/"

  ##### /Build #####

  ##### Clean #####
  clean:
    desc: Cleanup ALL build artifacts, deno/node modules and downloaded memos binaries.
    summary: |
      This will free up nearly 20GB of disk space, but will require a full rebuild.
      Don't use unless you know what you're doing.
    deps:
      - dev:killprocesses
    ignore_error: true
    cmds:
      - sh -c "rm -rf ./.deno"
      - sh -c "rm -rf ./.dprint"
      - sh -c "rm -rf ./.sccache"
      - sh -c "rm -rf ./.task"
      - sh -c "rm -rf ./build"
      - sh -c "rm -rf ./dist-ui"
      - sh -c "rm -rf ./.node_modules"
      - sh -c "rm -rf ./server-dist"
      - sh -c "rm -rf ./src-tauri/target"
      - sh -c "rm -rf ./src-ui/.vite"
  ##### /Clean #####

  ##### Miscellanea #####
  sccache:clear:
    desc: Clear sccache cache
    ignore_error: true
    cmds:
      - sccache --stop-server
      - sh -c "rm -rf ./.sccache"
  sccache:stats:
    desc: Show sccache stats
    silent: true
    cmds:
      - sccache --show-stats

  ##### Code Lint #####
  lint:
    aliases:
      - check
    desc: Run all checkers/linters in parallel
    deps:
      - lint:cargo
      - lint:deno
      - lint:taplo
      - lint:dprint
  lint:cargo:
    desc: lint rust with cargo clippy
    dir: ./src-tauri
    cmds:
      - cargo fmt --all --check
      - cargo clippy --all-features --workspace --locked
      - task: sccache:stats
    method: checksum
    sources:
      - ./src/**/*.rs
      - build.rs
      - Cargo.toml
      - Tauri.toml
      - .rustfmt.toml
  lint:deno:
    desc: lint typescript with deno
    cmds:
      - cd ./src-ui; deno lint
      - cd ./build-scripts; deno lint
  lint:taplo:
    desc: lint config (also check schemas)
    dir: ./src-tauri
    cmds:
      - taplo lint Tauri.toml
      - taplo lint Cargo.toml
      - taplo lint .rustfmt.toml
  lint:dprint:
    desc: lint with dprint
    cmds:
      - cd ./src-ui; dprint check
      - cd ./build-scripts; dprint check
  ##### /Code Lint #####

  ##### Code Fix #####
  fix:
    desc: Run all fixers in parallel
    deps:
      - fix:cargo
  fix:cargo:
    desc: Run cargo fix
    cmds:
      - cd ./src-tauri; cargo fix

  ##### /Code Fix #####

  ##### Code Format #####
  format:
    desc: Run all formatters in parallel
    aliases:
      - fmt
    deps:
      - format:cargo
      - format:dprint
  format:cargo:
    desc: Format with cargo fmt
    cmds:
      - cd ./src-tauri; cargo fmt --all
  format:dprint:
    desc: Format with dprint
    cmds:
      - cd ./src-tauri; dprint fmt
      - cd ./src-ui; dprint fmt
      - cd ./build-scripts; dprint fmt

  ##### /Code Format #####

  ##### Developer Environment Setup #####
  setup:platformdeps:
    desc: Install platform-specific dependencies
    deps:
      - setup:platformdeps:darwin
      - setup:platformdeps:linux
  setup:platformdeps:darwin:
    platforms: [darwin]
    internal: true
    interactive: true
    cmds:
      - xcode-select --install
  setup:platformdeps:linux:
    platforms: [linux]
    internal: true
    interactive: true
    cmds:
      - |
        sudo apt update -y &&
        sudo apt install -y \
          build-essential \
          curl \
          file \
          libgtk-3-dev \
          librsvg2-dev \
          libssl-dev \
          libwebkit2gtk-4.0-dev \
          patchelf \
          wget
      - |
        sudo apt install -y libappindicator3-dev || true
        echo -e '\e[33mNOTE: "libayatana-appindicator3-1" may conflict with libappindicator3-dev, its ok to ignore.\e[0m'

  setup:deno:
    desc: "Setup Deno"
    cmds:
      - task: setup:deno:posix
      - task: setup:deno:windows
    status:
      - sh -c 'if [ -z $(command -v deno) ]; then exit 1; fi'
  setup:deno:posix:
    platforms: [darwin, linux]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v brew) ]; then
          brew install deno
          exit 0
        fi
        echo -e '\e[33mERROR: Homebrew not found. Please install Deno manually.

        Alternatively, install Homebrew and run this task again.\e[0m'

        echo -e '\e[34m
        https://deno.com
        https://brew.sh
        \e[0m'
  setup:deno:windows:
    platforms: [windows]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v choco) ]; then
          echo "Installing Deno via Chocolatey..."
          powershell -Command 'Start-Process -Wait -Verb RunAs -FilePath "choco" -ArgumentList "install deno -y"'
          exit 0
        fi
        if ! [ -z $(command -v winget) ]; then
          echo "Installing Deno via Winget..."
          winget install --id Denoland.deno
          exit 0
        fi
        if ! [ -z $(command -v scoop) ]; then
          echo "Installing Deno via Scoop..."
          scoop install deno
          exit 0
        fi
        echo -e '\e[33mERROR: No package manager found. Please install Deno manually.

        Alternatively, install Chocolatey, Winget or Scoop and run this task again.\e[0m'

        echo -e '\e[34m
        https://deno.com
        https://chocolatey.org/install
        https://apps.microsoft.com/detail/9NBLGGH4NNS1
        https://scoop.sh/
        \e[0m'

  setup:rust:
    desc: "Setup rust"
    cmds:
      - setup:rust:posix
      - setup:rust:windows
      - rustup default stable
    status:
      - sh -c 'if [ -z $(command -v rustup) ]; then exit 1; fi'
      - sh -c 'if [ -z $(command -v rustc) ]; then exit 1; fi'
  setup:rust:posix:
    platforms: [darwin, linux]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v brew) ]; then
          brew install rustup-init
          rustup-init -y
          source "$HOME/.cargo/env"; rustup default stable
          exit 0
        fi
        echo -e '\e[34mHomebrew not found. Falling back to official install script.\e[0m'
        nohup curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env"; rustup default stable
        \e[0m'
  setup:rust:windows:
    platforms: [windows]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v choco) ]; then
          echo "Installing Rustup via Chocolatey..."
          powershell -Command 'Start-Process -Wait -Verb RunAs -FilePath "choco" -ArgumentList "install rustup.install -y"'
          exit 0
        fi
        if ! [ -z $(command -v winget) ]; then
          echo "Installing Rustup via Winget..."
          winget install --id Rustlang.Rustup
          exit 0
        fi
        if ! [ -z $(command -v scoop) ]; then
          echo "Installing Rustup via Scoop..."
          scoop install rustup
          exit 0
        fi
        echo -e '\e[33mERROR: No package manager found. Please install Rustup manually.

        Alternatively, install Chocolatey, Winget or Scoop and run this task again.\e[0m'

        echo -e '\e[34m
        https://rustup.rs

        https://chocolatey.org/install
        https://apps.microsoft.com/detail/9NBLGGH4NNS1
        https://scoop.sh/
        \e[0m'

  setup:
    desc: Setup the project tooling.
    env:
      # slow build with all optimizations
      RUSTFLAGS: -Ctarget-cpu=native -Copt-level=3 -Cstrip=symbols -Ccodegen-units=1
    deps:
      - setup:platformdeps
      - setup:deno
      - setup:rust
    cmds:
      - |
        {{if eq OS "windows"}}
        export PATH="$PATH;$HOME\.cargo\bin";
        {{else}}
        . "$HOME/.cargo/env";
        {{end}}
        rustup component add clippy;
        cargo install tauri-cli --locked;
        cargo install taplo-cli --locked;
        cargo install cargo-edit --locked;
        cargo install dprint --locked;
        export RUSTC_WRAPPER="";
        cargo install sccache --locked;
  ##### /Developer Environment Setup #####
  ### Git Actions ###
  prepush:
    desc: Run all checks before pushing changes
    cmds:
      - cd ./src-tauri; cargo generate-lockfile
      - task: lint
      - task: format

  checkrepo:
    desc: Check if git is in a clean state.
    cmds:
      - lsf=$(git ls-files --deleted --modified --others --exclude-standard -- :/) && [ -z "$lsf" ] || (echo "Repository is not clean." && exit 1)
      - git diff-index --quiet --cached HEAD -- || (echo "Files are staged." && exit 1)
      - git diff-files --quiet || (echo "There are unstaged changes." && exit 1)
      - echo "Repository is clean."

  bumpversion:
    internal: true
    cmds:
      - cd ./src-tauri; cargo set-version --locked {{.NEW_VERSION}}
      - sh -c "sed -i 's#Memospot/[0-9]\+\.[0-9]\+\.[0-9]\+"#Memospot/{{.NEW_VERSION}}"#' ./src-tauri/Tauri.toml"
      - cd ./src-tauri; cargo generate-lockfile
      - task: lint:config
      - task: format:config
      - git add ./src-tauri/Tauri.toml
      - git add ./src-tauri/Cargo.toml
      - git add ./src-tauri/Cargo.lock
      - git add Taskfile.yml
      - git commit -am "Bump version to v{{.NEW_VERSION}}"
    requires:
      vars: [NEW_VERSION]

  pushtag:
    desc: |
      Upgrade app version and push a new tag to origin.
      Usage: `task pushtag -- 0.0.0`.
    summary: |
      - This will trigger a test build on GitHub Actions.
    cmds:
      - task: bumpversion
        vars:
          NEW_VERSION: "{{ .CLI_ARGS }}"
      - task: prepush
      - git tag -a v{{.CLI_ARGS}} -m "Push v{{.CLI_ARGS}}"
      - git push origin --tags
