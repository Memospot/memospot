# https://taskfile.dev/#/installation

# To use this Taskfile on Windows, add Git\usr\bin to PATH.
# This allows using Git's bundled GNU Core Utils (rm, mv, etc).
#
# To add git\usr\bin to the current powershell session PATH:
#* $Env:Path += ";$Env:ProgramFiles\Git\usr\bin";

version: "3"
env:
  REPO_ROOT:
    sh: cd "$(git rev-parse --show-toplevel)"; echo "$(pwd)"
  DPRINT_CACHE_DIR:
    sh: |
      DPRINT_CACHE_DIR="{{ osClean (print .REPO_ROOT "/.dprint" ) }}";
      mkdir -p "$DPRINT_CACHE_DIR"; echo "$DPRINT_CACHE_DIR"
  RUST_BACKTRACE: full
  RUSTC_WRAPPER:
    sh: |
      sccache="{{ osClean "$HOME/.cargo/bin/sccache" }}{{if eq OS "windows"}}.exe{{end}}"
      if [ -z $(command -v $sccache) ]; then echo ""; else echo "$sccache"; fi
  SCCACHE_DIR:
    sh: |
      SCCACHE_DIR="{{ osClean (print .REPO_ROOT "/.sccache" ) }}";
      mkdir -p "$SCCACHE_DIR"; echo "$SCCACHE_DIR"
  CARGO_INCREMENTAL:
    sh: if [ -z $(command -v sccache) ]; then echo "1"; else echo "0"; fi

tasks:
  download-memos-binaries:
    desc: Download Memos server binaries
    summary: |
      - Download latest versions of Memos server binaries to `server-dist/`
      - This will be used by the Tauri build process.
      - Only runs if any of the binaries are missing.
    cmd: bun run ./build-scripts/downloadMemosBuildsHook.ts
    status:
      - test -f ./server-dist/memos-aarch64-apple-darwin
      - test -f ./server-dist/memos-x86_64-apple-darwin
      - test -f ./server-dist/memos-x86_64-pc-windows-msvc.exe
      - test -f ./server-dist/memos-x86_64-unknown-linux-gnu

  upx:
    desc: Compress built binaries with upx
    summary: |
      - UPX is intentionally disabled for Windows to reduce AV false positives.
      - macOS is not supported by UPX.
    platforms: [linux]
    ignore_error: true
    cmd: bun run ./build-scripts/upxPackHook.ts

  ##### Tauri Build Hooks #####
  tauri:hook:before-dev:
    desc: Before dev scripts
    cmds:
      - bun install || bun install
      - task: download-memos-binaries
      - task: dev:ui

  tauri:hook:before-build:
    desc: Before build scripts
    summary: |
      - Build Frontend with Vite
      - Download latest versions of Memos server binaries to `server-dist/`
    cmds:
      - bun install || bun install
      - task: gen:icons
      - task: build:ui
      - task: download-memos-binaries

  tauri:hook:before-bundle:
    desc: Before bundle scripts
    summary: upx
    cmds: [task: upx]
  ##### /Build Hooks #####

  #### Code runner ####
  # Used to overcome limitations of code-runner vscode extension
  coderunner:cargo:clippy:
    desc: Run cargo clippy
    cmd: cargo clippy --all-features --all-targets --locked
  coderunner:bun:
    desc: Run a script with Bun
    cmd: bun run {{ .CLI_ARGS }}
  coderunner:bun:test:
    desc: Test a script with Bun
    cmd: bun test {{ .CLI_ARGS }}
  coderunner:dprint:check:
    desc: Run dprint check
    cmd: cd "{{ trimAll "'" (osDir .CLI_ARGS) }}"; dprint check {{ trimAll "'" (osBase .CLI_ARGS) }}
  #### /Code runner ####

  ##### Tests #####
  test:
    desc: Run all tests in parallel
    deps:
      - test:crates
      - test:rs
      - test:tauri
      - test:ts
  test:crates:
    desc: Run side crates tests
    cmd: time cargo test --workspace --exclude memospot --lib -- --nocapture
  test:rs:
    desc: Run all Rust tests
    cmd: time cargo test --workspace --lib -- --nocapture
  test:tauri:
    desc: Run all Tauri tests
    cmd: time cargo test --package memospot --lib -- --nocapture
  test:ts:
    desc: Run all TypeScript tests
    cmds:
      - bun install || bun install
      - cd build-scripts; bun test
      - cd src-ui; bun test
  ##### /Tests #####

  ##### Development #####
  dev:ui:
    desc: Run Vite front-end dev server
    summary: |
      - This will start the front-end in development mode.
      - Default address: http://localhost:5173
    dir: src-ui
    cmd: bun x vite
  dev:
    desc: Run the app in development mode
    summary: |
      - This will start the app in development mode.
      - It will automatically reload the app when you make changes.
      - A fast Rust build is prioritized.
    deps: [task: dev:killprocesses]
    cmds:
      - cargo tauri dev
      - task: dev:killprocesses
      - task: sccache:stats
  dev:killprocesses:
    desc: Kill all running Memospot/Memos processes
    cmds: [task: dev:killprocesses:posix, task: dev:killprocesses:windows]
  dev:killprocesses:posix:
    platforms: [linux, darwin]
    internal: true
    ignore_error: true
    cmds: [killall memospot > /dev/null 2>&1, killall memos > /dev/null 2>&1]
  dev:killprocesses:windows:
    platforms: [windows]
    internal: true
    ignore_error: true
    cmds: [taskkill /f /t /im memospot.exe >nul 2>&1, taskkill /f /t /im memos.exe >nul 2>&1]

  update-deps:
    desc: Update all dependencies
    deps: [task: update-deps:dprint, task: update-deps:rust, task: update-deps:ts]

  update-deps:dprint:
    desc: Update dprint dependencies
    cmd: dprint config update

  update-deps:rust:
    desc: Update Rust dependencies
    cmd: cargo update

  update-deps:ts:
    desc: Update TypeScript dependencies
    cmds:
      - bun update
      - cd ./src-ui; bun update
      - cd ./build-scripts; bun update
      - task: fmt

  update-toolchain:
    desc: Update project toolchain
    cmd: rustup update; rustup self update; rustup component add clippy

  gen:icons:
    desc: Generate app icons from `assets/app-icon-lossless.webp`
    cmd: |
      {{ if eq (env "CI") "true" }}exit 0{{ end }}
      cargo tauri icon ./assets/app-icon-lossless.webp
      cp -f ./src-tauri/icons/icon.ico ./src-ui/public/favicon.ico
    sources: [./assets/app-icon-lossless.webp]
    generates: [./src-tauri/icons/*.png, ./src-ui/public/favicon.ico]

  ##### /Development #####

  ##### Build #####
  build:ui:
    desc: Build front-end with Vite
    dir: ./src-ui
    cmd: bun run build
    sources: [./src-ui/src/**/*]
    generates: [./dist-ui/**/*]

  build:
    desc: Build the app for production
    summary: This will create an universal x86-64 optimized build of the app.
    env:
      # optimized universal x86-64 build
      RUSTFLAGS: -Ctarget-cpu=x86-64 -Copt-level=3 -Cstrip=symbols -Ccodegen-units=8
    cmds:
      - cargo tauri build
      - task: sccache:stats
      - task: postbuild
  postbuild:
    desc: Move relevant files to `build/`
    ignore_error: true
    silent: true
    cmds:
      - printf '\e[36mMoving relevant build files to `./build` directory. \e[0m'
      - mkdir -p ./build
      - for:
          - bundle/appimage/*.AppImage
          - bundle/deb/*.deb
          - bundle/msi/*.msi
          - bundle/nsis/*.exe
          - dist/
          - memos
          - memos.exe
          - memospot
          - memospot.exe
        cmd: mv -f ./target/release/{{ .ITEM }} ./build/ 2>/dev/null
      - mkdir -p "$(find ./build/*.AppImage | head -n 1).home"
      - |
        if ls ./build/memos* 1> /dev/null 2>&1; then printf '\e[32mDone.\e[0m';
        else printf '\e[33mFailed to move files.\e[0m'; fi;
  ##### /Build #####
  ##### Clean #####
  clean:
    desc: Cleanup ALL build artifacts, node modules and downloaded memos binaries.
    summary: This can free up to 20GB of disk space but will require a full rebuild upon the next run.
    deps: [dev:killprocesses]
    ignore_error: true
    cmds:
      - for:
          - ./.dprint
          - ./.sccache
          - ./.task
          - ./build
          - ./build-scripts/node_modules
          - ./dist-ui
          - ./node_modules
          - ./server-dist
          - ./src-ui/.vite
          - ./src-ui/node_modules
          - ./target
        cmd: rm -rf {{ .ITEM }}
      - bun pm cache rm
      - cargo cache -a
  ##### /Clean #####

  ##### Miscellanea #####
  sccache:clear:
    desc: Clear sccache cache
    ignore_error: true
    cmds:
      - sccache --stop-server
      - rm -rf ./.sccache
  sccache:stats:
    desc: Show sccache stats
    silent: true
    cmd: if [ $CARGO_INCREMENTAL = 0 ]; then sccache --show-stats; fi

  ##### Code Lint #####
  lint:
    aliases: [check]
    desc: Run all checkers/linters in parallel
    deps:
      - lint:rust
      - lint:ts
      - lint:dprint
  lint:rust:
    desc: lint rust with cargo clippy
    ignore_error: true
    cmds:
      - mkdir -p dist-ui
      - cargo fmt --all --check
      - cargo clippy --all-features --all-targets --workspace --locked
      - task: sccache:stats
  lint:ts:
    desc: Lint TypeScript
    cmds:
      - cd ./src-ui; bun lint
      - cd ./build-scripts; bun lint
  lint:dprint:
    desc: Check formatting with dprint
    cmd: dprint check

  ##### /Code Lint #####

  ##### Code Fix #####
  fix:
    desc: Run all fixers in parallel
    deps: [fix:rs, fix:ts]
  fix:rs:
    desc: Run cargo fix (requires clean repo)
    cmd: cargo fix
  fix:ts:
    desc: Run BiomeJS safe fixes
    cmd: bun x @biomejs/biome lint --apply .
  ##### /Code Fix #####

  ##### Code Format #####
  fmt:
    desc: Format repo code with dprint
    summary: dprint is configured to format json, rust, toml, yaml, html, css, typescript and markdown files.
    aliases: [format]
    cmd: dprint fmt --diff
  ##### /Code Format #####

  ##### Developer Environment Setup #####
  setup:platformdeps:
    desc: Install platform-specific dependencies
    interactive: true
    deps: [task: setup:platformdeps:darwin, task: setup:platformdeps:linux]
  setup:platformdeps:darwin:
    platforms: [darwin]
    internal: true
    interactive: true
    cmd: xcode-select --install
  setup:platformdeps:linux:
    platforms: [linux]
    internal: true
    interactive: true
    ignore_error: true
    silent: true
    cmd: |
      sudo apt update -y
      sudo apt install -y \
        build-essential \
        curl \
        file \
        libgtk-3-dev \
        librsvg2-dev \
        libssl-dev \
        libwebkit2gtk-4.0-dev \
        patchelf \
        wget
      sudo apt install -y libappindicator3-dev 2>/dev/null

  setup:bun:
    desc: "Setup Bun"
    cmds:
      - task: setup:bun:posix
      - task: setup:bun:windows
      - git config diff.lockb.textconv bun
      - git config diff.lockb.binary true
    status:
      - if [ -z $(command -v bun) ]; then exit 1; fi
  setup:bun:posix:
    platforms: [darwin, linux]
    internal: true
    silent: true
    cmd: |
      if ! [ -z $(command -v brew) ]; then
        brew install bun
        exit 0
      fi
      echo -e '\e[33mERROR: Homebrew not found. Please install Bun manually.

      Alternatively, install Homebrew and run this task again.\e[0m'

      echo -e '\e[34m
      https://bun.sh
      https://brew.sh
      \e[0m'
  setup:bun:windows:
    platforms: [windows]
    internal: true
    silent: true
    cmd: |
      if ! [ -z $(command -v choco) ]; then
        echo "Installing Bun via Chocolatey..."
        powershell -Command 'Start-Process -Wait -Verb RunAs -FilePath "choco" -ArgumentList "install bun -y"'
        exit 0
      fi
      if ! [ -z $(command -v winget) ]; then
        echo "Installing Bun via Winget..."
        winget install --id Oven-sh.Bun
        exit 0
      fi
      if ! [ -z $(command -v scoop) ]; then
        echo "Installing Bun via Scoop..."
        scoop install bun
        exit 0
      fi
      echo -e '\e[33mERROR: No package manager found. Please install Bun manually.

      Alternatively, install Chocolatey, Winget or Scoop and run this task again.\e[0m'

      echo -e '\e[34m
      https://bun.sh
      https://chocolatey.org/install
      https://apps.microsoft.com/detail/9NBLGGH4NNS1
      https://scoop.sh/
      \e[0m'

  setup:rust:
    desc: "Setup rust"
    cmds:
      - task: setup:rust:posix
      - task: setup:rust:windows
      - source "$HOME/.cargo/env"; rustup default stable
    status:
      - if [ -z $(command -v rustup) ]; then exit 1; fi
      - if [ -z $(command -v rustc) ]; then exit 1; fi
  setup:rust:posix:
    platforms: [darwin, linux]
    internal: true
    silent: true
    cmd: |
      if ! [ -z $(command -v brew) ]; then
        brew install rustup-init
        rustup-init -y
        source "$HOME/.cargo/env"; rustup default stable
        exit 0
      fi
      echo -e '\e[34mHomebrew not found. Falling back to official install script.\e[0m'
      nohup curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      source "$HOME/.cargo/env"; rustup default stable
  setup:rust:windows:
    platforms: [windows]
    internal: true
    silent: true
    cmd: |
      if ! [ -z $(command -v choco) ]; then
        echo "Installing Rustup via Chocolatey..."
        powershell -Command 'Start-Process -Wait -Verb RunAs -FilePath "choco" -ArgumentList "install rustup.install -y"'
        exit 0
      fi
      if ! [ -z $(command -v winget) ]; then
        echo "Installing Rustup via Winget..."
        winget install --id Rustlang.Rustup
        exit 0
      fi
      if ! [ -z $(command -v scoop) ]; then
        echo "Installing Rustup via Scoop..."
        scoop install rustup
        exit 0
      fi
      echo -e '\e[33mERROR: No package manager found. Please install Rustup manually.

      Alternatively, install Chocolatey, Winget or Scoop and run this task again.\e[0m'

      echo -e '\e[34m
      https://rustup.rs

      https://chocolatey.org/install
      https://apps.microsoft.com/detail/9NBLGGH4NNS1
      https://scoop.sh/
      \e[0m'

  setup:
    desc: Setup the project tooling.
    interactive: true
    env:
      # slow build with all optimizations
      RUSTFLAGS: -Ctarget-cpu=native -Copt-level=3 -Cstrip=symbols -Ccodegen-units=8
    deps:
      - task: setup:platformdeps
      - task: setup:bun
      - task: setup:rust
    silent: true
    cmd: |
      {{if eq OS "windows"}}
        export PATH="$PATH;$HOME\.cargo\bin"
      {{else}}
        . "$HOME/.cargo/env"
      {{end}}
      rustup component add clippy
      rustup target add aarch64-apple-darwin x86_64-apple-darwin x86_64-pc-windows-msvc x86_64-unknown-linux-gnu
      export RUSTC_WRAPPER=""
      cargo install cargo-binstall --locked -y
      cargo binstall cargo-cache@0.8.3 cargo-edit@0.12.2 dprint@0.45.1 sccache@0.8.0 tauri-cli@1.5.11 --locked -y

  ##### /Developer Environment Setup #####
  ### Git Actions ###
  checkrepo:
    desc: Check if git is in a clean state.
    silent: true
    cmds:
      - lsf=$(git ls-files --deleted --modified --others --exclude-standard -- :/) && [ -z "$lsf" ] || (echo "Repository is not clean." && exit 1)
      - git diff-index --quiet --cached HEAD -- || (echo "Files are staged." && exit 1)
      - git diff-files --quiet || (echo "There are unstaged changes." && exit 1)
      - echo "Repository is clean."

  bumpversion:
    desc: Bump version
    summary: This will bump the version in `src-tauri/Cargo.toml` and `src-tauri/Tauri.toml`.
    cmds:
      - task: internal:bumpversion
        vars: { NEW_VERSION: '{{print .CLI_ARGS | trimPrefix "v" }}' }
  internal:bumpversion:
    internal: true
    silent: true
    cmds:
      - cd ./src-tauri; cargo set-version --package memospot --locked {{.NEW_VERSION}}
      - sh -c "sed -i 's#Memospot/[0-9]\+\.[0-9]\+\.[0-9]\+"#Memospot/{{.NEW_VERSION}}"#' ./src-tauri/Tauri.toml"
      - cargo generate-lockfile
      - task: fmt
      - git add ./src-tauri/Tauri.toml ./src-tauri/Cargo.toml ./Cargo.lock
      - git commit -m "Bump version to v{{.NEW_VERSION}}"
    requires: { vars: [NEW_VERSION] }

  pushtag:
    desc: |
      Push a new tag to origin.
      Usage: `task pushtag -- 0.0.0`.
    summary: This will trigger a test build on GitHub Actions.
    cmds:
      - git tag -a v{{print .CLI_ARGS | trimPrefix "v" }} -m "Push v{{print .CLI_ARGS | trimPrefix "v" }}"
      - git push origin --tags
