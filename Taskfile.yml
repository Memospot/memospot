# https://taskfile.dev/#/installation

# To use this Taskfile on Windows, add Git\usr\bin to PATH.
# This allows using Git's bundled GNU Core Utils (rm, mv, etc).
#
# To add git\usr\bin to the current powershell session PATH:
#* $Env:Path += ";$Env:ProgramFiles\Git\usr\bin";

version: "3"
env:
  REPO_ROOT:
    sh: |
      cd "$(git rev-parse --show-toplevel)";
      echo "$(pwd)"

  DENO_DIR: >-
    {{ osClean (print .REPO_ROOT "/.deno" ) }}

  DPRINT_CACHE_DIR:
    sh: |
      DPRINT_CACHE_DIR="{{ osClean (print .REPO_ROOT "/.dprint" ) }}";
      mkdir -p "$DPRINT_CACHE_DIR";
      echo "$DPRINT_CACHE_DIR"

  RUST_BACKTRACE: full
  RUSTC_WRAPPER:
    sh: |
      sccache="{{ osClean "$HOME/.cargo/bin/sccache" }}{{if eq OS "windows"}}.exe{{end}}"
      if [ -z $(command -v $sccache) ]; then
        echo "";
      else
        echo "$sccache";
      fi

  SCCACHE_DIR:
    sh: |
      SCCACHE_DIR="{{ osClean (print .REPO_ROOT "/.sccache" ) }}";
      mkdir -p "$SCCACHE_DIR";
      echo "$SCCACHE_DIR"

  CARGO_INCREMENTAL:
    sh: |
      if [ -z $(command -v sccache) ]; then
        echo "1";
      else
        echo "0";
      fi

tasks:
  #### CI ####
  # Called by GitHub actions
  ci:deno:cache:
    cmds:
      - deno cache --lock=deno.lock ./deps.ts
  ci:deno:tests:
    cmds:
      - task: test:build-scripts
  ci:lint:config:
    cmds:
      - task: lint:toml
  ci:lint:deno:
    cmds:
      - task: lint:deno
  ci:lint:dprint:
    cmds:
      - task: lint:dprint
  #### /CI ####

  download-memos-binaries:
    desc: Download Memos server binaries
    summary: |
      - Download latest versions of Memos server binaries to `server-dist/`
      - This will be used by the Tauri build process.
      - Only runs if any of the binaries are missing.
    cmds:
      - deno run -A ./build-scripts/downloadMemosBuildsHook.ts
    status:
      - test -f ./server-dist/memos-x86_64-unknown-linux-gnu
      - test -f ./server-dist/memos-x86_64-pc-windows-msvc.exe
      - test -f ./server-dist/memos-x86_64-apple-darwin
      - test -f ./server-dist/memos-aarch64-apple-darwin
      - test -d ./server-dist/dist

  upx:
    desc: Compress built binaries with upx
    summary: |
      - UPX is intentionally disabled for Windows to reduce AV false positives.
      - macOS is not supported by UPX.
    platforms: [linux]
    ignore_error: true
    cmds:
      - deno run -A ./build-scripts/upxPackHook.ts

  ##### Tauri Build Hooks #####
  tauri:hook:before-dev:
    desc: Before dev scripts
    cmds:
      - task: download-memos-binaries
      - task: dev:ui

  tauri:hook:before-build:
    desc: Before build scripts
    summary: |
      - Build Frontend with Deno/Vite
      - Download latest versions of Memos server binaries to `server-dist/`
    cmds:
      - task: gen:icons
      - task: build:ui
      - task: download-memos-binaries

  tauri:hook:before-bundle:
    desc: Before bundle scripts
    summary: |
      - upx
    cmds:
      - task: upx
  ##### /Build Hooks #####

  #### Code runner ####
  # Used to overcome limitations of code-runner vscode extension
  coderunner:cargo:clippy:
    desc: Run cargo clippy
    cmds:
      - cargo clippy --all-features --all-targets --locked
  coderunner:deno:
    desc: Run a script with Deno
    cmds:
      - deno run -A {{ .CLI_ARGS }}
  coderunner:deno:test:
    desc: Test a script with Deno
    cmds:
      - deno test -A {{ .CLI_ARGS }}
  coderunner:dprint:check:
    desc: Run dprint check
    cmds:
      - cd "{{ trimAll "'" (osDir .CLI_ARGS) }}"; dprint check {{ trimAll "'" (osBase .CLI_ARGS) }}
  #### /Code runner ####

  ##### Tests #####
  test:
    desc: Run all tests
    deps:
      - test:tauri
      - test:crates
      - test:build-scripts
  test:rust:
    desc: Run all Rust tests
    cmds:
      - time cargo test --workspace --lib -- --nocapture
  test:tauri:
    desc: Run all Tauri tests
    cmds:
      - time cargo test --package memospot --lib -- --nocapture
  test:crates:
    desc: Run side crates tests
    cmds:
      - time cargo test --workspace --exclude memospot --lib -- --nocapture
  test:build-scripts:
    desc: Run build scripts tests
    cmds:
      - deno task test-build-scripts
  ##### /Tests #####

  ##### Development #####
  dev:ui:
    desc: Run Vite front-end dev server with Deno
    summary: |
      - This will start the front-end in development mode.
      - Default address: http://localhost:5173
    cmds:
      - deno task dev
  dev:
    desc: Run the app in development mode
    summary: |
      - This will start the app in development mode.
      - It will automatically reload the app when you make changes.
      - A fast Rust build is prioritized.
    deps:
      - task: dev:killprocesses
    cmds:
      - cargo tauri dev
      - task: dev:killprocesses
      - task: sccache:stats
  dev:killprocesses:
    desc: Kill all running Memospot/Memos processes
    cmds:
      - task: dev:killprocesses:posix
      - task: dev:killprocesses:windows
  dev:killprocesses:posix:
    platforms: [linux, darwin]
    internal: true
    ignore_error: true
    cmds:
      - killall memospot > /dev/null 2>&1
      - killall memos > /dev/null 2>&1
  dev:killprocesses:windows:
    platforms: [windows]
    internal: true
    ignore_error: true
    cmds:
      - taskkill /f /t /im memospot.exe >nul 2>&1
      - taskkill /f /t /im memos.exe >nul 2>&1

  update-deno-lock:
    desc: Update Deno lock file
    cmds:
      - deno cache --reload --lock=deno.lock --lock-write ./deps.ts

  update-deps:
    desc: Update project dependencies
    cmds:
      - cargo update

  update-toolchain:
    desc: Update project toolchain
    cmds:
      - rustup update
      - rustup self update
      - rustup component add clippy

  gen:icons:
    desc: Generate app icons from `assets/app-icon-lossless.webp`
    cmds:
      - |
        {{ if eq (env "CI") "true" }}
          exit 0
        {{ end }}

        cargo tauri icon ./assets/app-icon-lossless.webp
        cp -f ./src-tauri/icons/icon.ico ./src-ui/public/favicon.ico
    sources:
      - ./assets/app-icon-lossless.webp
    generates:
      - ./src-tauri/icons/*
      - ./src-ui/public/favicon.ico

  ##### /Development #####

  ##### Build #####
  build:ui:
    desc: Run build front-end with Deno and Vite
    cmds:
      - deno task build
    sources:
      - "./src-ui/src/**/*"
    generates:
      - "./dist-ui/**/*"

  build:
    desc: Build the app for production
    summary: |
      - This will create an universal x86-64 optimized build of the app.
    env:
      # optimized universal x86-64 build
      RUSTFLAGS: -Ctarget-cpu=x86-64 -Copt-level=3 -Cstrip=symbols -Ccodegen-units=8
    cmds:
      - cargo tauri build
      - task: sccache:stats
      - task: postbuild
  postbuild:
    desc: Move relevant files to `build/`
    ignore_error: true
    cmds:
      - mkdir -p ./build
      - mv -f ./target/release/memos ./build/ || true
      - mv -f ./target/release/memospot ./build/ || true
      - mv -f ./target/release/memos.exe ./build/ || true
      - mv -f ./target/release/dist/ ./build/ || true
      - mv -f ./target/release/memospot.exe ./build/ || true
      - mv -f ./target/release/bundle/nsis/* ./build/ || true
      - mv -f ./target/release/bundle/msi/* ./build/ || true
      - mv -f ./target/release/bundle/deb/*.deb ./build/ || true
      - mv -f ./target/release/bundle/appimage/*.AppImage ./build/ || true

  ##### /Build #####

  ##### Clean #####
  clean:
    desc: Cleanup ALL build artifacts, deno/node modules and downloaded memos binaries.
    summary: |
      This will free up nearly 20GB of disk space, but will require a full rebuild.
      Don't use unless you know what you're doing.
    deps:
      - dev:killprocesses
    ignore_error: true
    cmds:
      - rm -rf ./.deno
      - rm -rf ./.dprint
      - rm -rf ./.sccache
      - rm -rf ./.task
      - rm -rf ./build
      - rm -rf ./dist-ui
      - rm -rf ./.node_modules
      - rm -rf ./server-dist
      - rm -rf ./target
      - rm -rf ./src-ui/.vite
      - cargo cache -a
  ##### /Clean #####

  ##### Miscellanea #####
  sccache:clear:
    desc: Clear sccache cache
    ignore_error: true
    cmds:
      - sccache --stop-server
      - rm -rf ./.sccache
  sccache:stats:
    desc: Show sccache stats
    silent: true
    cmds:
      - sccache --show-stats

  ##### Code Lint #####
  lint:
    aliases:
      - check
    desc: Run all checkers/linters in parallel
    deps:
      - lint:cargo
      - lint:deno
      - lint:toml
      - lint:dprint
  lint:cargo:
    desc: lint rust with cargo clippy
    ignore_error: true
    cmds:
      - mkdir -p dist-ui
      - cargo fmt --all --check
      - cargo clippy --all-features --all-targets --workspace --locked
      - task: sccache:stats
  lint:deno:
    desc: lint typescript with deno
    cmds:
      - cd ./src-ui; deno lint
      - cd ./build-scripts; deno lint
  lint:toml:
    aliases:
      - lint:config
    desc: lint config (also check schemas)
    cmds:
      - dprint check .rustfmt.toml
      - dprint check Cargo.toml
      - dprint check ./src-tauri/Tauri.toml
      - dprint check ./src-tauri/Cargo.toml
      - taplo lint .rustfmt.toml
      - taplo lint Cargo.toml
      - taplo lint ./src-tauri/Tauri.toml
      - taplo lint ./src-tauri/Cargo.toml
  lint:dprint:
    desc: lint with dprint
    cmds:
      - cd ./src-ui; dprint check
      - cd ./build-scripts; dprint check
  ##### /Code Lint #####

  ##### Code Fix #####
  fix:
    desc: Run all fixers in parallel
    deps:
      - fix:cargo
  fix:cargo:
    desc: Run cargo fix
    cmds:
      - cargo fix

  ##### /Code Fix #####

  ##### Code Format #####
  format:
    desc: Format repo code with dprint
    summary: |
      - dprint is configured to format json, rust, toml, yaml, html, css, typescript and markdown files.
    aliases:
      - fmt
    cmds:
      - dprint fmt --diff

  ##### /Code Format #####

  ##### Developer Environment Setup #####
  setup:platformdeps:
    desc: Install platform-specific dependencies
    interactive: true
    deps:
      - task: setup:platformdeps:darwin
      - task: setup:platformdeps:linux
  setup:platformdeps:darwin:
    platforms: [darwin]
    internal: true
    interactive: true
    cmds:
      - xcode-select --install
  setup:platformdeps:linux:
    platforms: [linux]
    internal: true
    interactive: true
    cmds:
      - ignore_error: true
        silent: true
        cmd: |
          apt update -y && \
          apt install -y \
            build-essential \
            curl \
            file \
            libgtk-3-dev \
            librsvg2-dev \
            libssl-dev \
            libwebkit2gtk-4.0-dev \
            patchelf \
            wget
          apt install -y libappindicator3-dev || true
          echo -e '\e[33mNOTE: "libayatana-appindicator3-1" may conflict with libappindicator3-dev, it is ok to ignore.\e[0m'

  setup:deno:
    desc: "Setup Deno"
    cmds:
      - task: setup:deno:posix
      - task: setup:deno:windows
    status:
      - if [ -z $(command -v deno) ]; then exit 1; fi
  setup:deno:posix:
    platforms: [darwin, linux]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v brew) ]; then
          brew install deno
          exit 0
        fi
        echo -e '\e[33mERROR: Homebrew not found. Please install Deno manually.

        Alternatively, install Homebrew and run this task again.\e[0m'

        echo -e '\e[34m
        https://deno.com
        https://brew.sh
        \e[0m'
  setup:deno:windows:
    platforms: [windows]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v choco) ]; then
          echo "Installing Deno via Chocolatey..."
          powershell -Command 'Start-Process -Wait -Verb RunAs -FilePath "choco" -ArgumentList "install deno -y"'
          exit 0
        fi
        if ! [ -z $(command -v winget) ]; then
          echo "Installing Deno via Winget..."
          winget install --id Denola nd.deno
          exit 0
        fi
        if ! [ -z $(command -v scoop) ]; then
          echo "Installing Deno via Scoop..."
          scoop install deno
          exit 0
        fi
        echo -e '\e[33mERROR: No package manager found. Please install Deno manually.

        Alternatively, install Chocolatey, Winget or Scoop and run this task again.\e[0m'

        echo -e '\e[34m
        https://deno.com
        https://chocolatey.org/install
        https://apps.microsoft.com/detail/9NBLGGH4NNS1
        https://scoop.sh/
        \e[0m'

  setup:rust:
    desc: "Setup rust"
    cmds:
      - task: setup:rust:posix
      - task: setup:rust:windows
      - |
        source "$HOME/.cargo/env"
        rustup default stable
    status:
      - if [ -z $(command -v rustup) ]; then exit 1; fi
      - if [ -z $(command -v rustc) ]; then exit 1; fi
  setup:rust:posix:
    platforms: [darwin, linux]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v brew) ]; then
          brew install rustup-init
          rustup-init -y
          source "$HOME/.cargo/env"; rustup default stable
          exit 0
        fi
        echo -e '\e[34mHomebrew not found. Falling back to official install script.\e[0m'
        nohup curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env"; rustup default stable
  setup:rust:windows:
    platforms: [windows]
    internal: true
    silent: true
    cmds:
      - |
        if ! [ -z $(command -v choco) ]; then
          echo "Installing Rustup via Chocolatey..."
          powershell -Command 'Start-Process -Wait -Verb RunAs -FilePath "choco" -ArgumentList "install rustup.install -y"'
          exit 0
        fi
        if ! [ -z $(command -v winget) ]; then
          echo "Installing Rustup via Winget..."
          winget install --id Rustlang.Rustup
          exit 0
        fi
        if ! [ -z $(command -v scoop) ]; then
          echo "Installing Rustup via Scoop..."
          scoop install rustup
          exit 0
        fi
        echo -e '\e[33mERROR: No package manager found. Please install Rustup manually.

        Alternatively, install Chocolatey, Winget or Scoop and run this task again.\e[0m'

        echo -e '\e[34m
        https://rustup.rs

        https://chocolatey.org/install
        https://apps.microsoft.com/detail/9NBLGGH4NNS1
        https://scoop.sh/
        \e[0m'

  setup:
    desc: Setup the project tooling.
    interactive: true
    env:
      # slow build with all optimizations
      RUSTFLAGS: -Ctarget-cpu=native -Copt-level=3 -Cstrip=symbols -Ccodegen-units=8
    deps:
      - task: setup:platformdeps
      - task: setup:deno
      - task: setup:rust
    cmds:
      - silent: true
        cmd: |
          {{if eq OS "windows"}}
            export PATH="$PATH;$HOME\.cargo\bin"
          {{else}}
            . "$HOME/.cargo/env"
          {{end}}
          rustup component add clippy
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
          rustup target add x86_64-pc-windows-msvc
          rustup target add x86_64-unknown-linux-gnu
          export RUSTC_WRAPPER=""
          cargo install cargo-binstall --locked
          cargo binstall tauri-cli --locked -y
          cargo binstall taplo-cli --locked -y
          cargo binstall cargo-edit --locked -y
          cargo binstall cargo-cache --locked -y
          cargo binstall dprint --locked -y
          cargo binstall sccache@0.8.0 --locked -y
  ##### /Developer Environment Setup #####
  ### Git Actions ###
  checkrepo:
    desc: Check if git is in a clean state.
    silent: true
    cmds:
      - lsf=$(git ls-files --deleted --modified --others --exclude-standard -- :/) && [ -z "$lsf" ] || (echo "Repository is not clean." && exit 1)
      - git diff-index --quiet --cached HEAD -- || (echo "Files are staged." && exit 1)
      - git diff-files --quiet || (echo "There are unstaged changes." && exit 1)
      - echo "Repository is clean."

  bumpversion:
    desc: Bump version
    summary: |
      - This will bump the version in `src-tauri/Cargo.toml` and `src-tauri/Tauri.toml`.
      - It will also run `task lint:toml` and `task format:dprint` to ensure the files are valid.
    cmds:
      - task: internal:bumpversion
        vars:
          NEW_VERSION: "{{ .CLI_ARGS }}"
  internal:bumpversion:
    internal: true
    silent: true
    cmds:
      - cd ./src-tauri; cargo set-version --package memospot --locked {{.NEW_VERSION}}
      - sh -c "sed -i 's#Memospot/[0-9]\+\.[0-9]\+\.[0-9]\+"#Memospot/{{.NEW_VERSION}}"#' ./src-tauri/Tauri.toml"
      - cargo generate-lockfile
      - task: format
      - task: lint:toml
      - git add ./src-tauri/Tauri.toml
      - git add ./src-tauri/Cargo.toml
      - git add ./Cargo.lock
      - git commit -m "Bump version to v{{.NEW_VERSION}}"
    requires:
      vars: [NEW_VERSION]

  pushtag:
    desc: |
      Upgrade app version and push a new tag to origin.
      Usage: `task pushtag -- 0.0.0`.
    summary: |
      - This will trigger a test build on GitHub Actions.
    cmds:
      - task: internal:bumpversion
        vars:
          NEW_VERSION: '{{print .CLI_ARGS | trimPrefix "v" }}'
      - git tag -a v{{print .CLI_ARGS | trimPrefix "v" }} -m "Push v{{print .CLI_ARGS | trimPrefix "v" }}"
      - git push origin --tags
